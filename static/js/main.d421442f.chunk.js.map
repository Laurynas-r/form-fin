{"version":3,"sources":["components/sing-up-button/sign-up-button.component.jsx","components/suggestions/suggestions.component.jsx","components/input/form-input.component.jsx","pages/registration-page/registration-page.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SignUpButton","children","className","Suggestions","props","suggestion","placeId","style","description","FormInput","register","error","label","placeholder","inputProps","errorMessage","console","log","ref","type","RegistrationPage","getLocalStorageData","localStorage","getItem","allRegisteredUsers","JSON","parse","useForm","handleSubmit","errors","useState","setAllUsers","address","setAddress","name","lastName","email","location","updateUser","setUpdateNewUser","onSubmit","data","e","preventDefault","allUsers","push","setItem","stringify","addNewUser","target","reset","required","pattern","value","onChange","onSelect","getInputProps","suggestions","loading","getSuggestionItemProps","map","u","index","onClick","user","indexOf","user2","onUpdate","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d421442f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './sign-up-button.styles.scss';\r\n\r\nconst SignUpButton = ({children}) => (\r\n    \r\n        <button className=\"sign-up-button\">\r\n            {children}\r\n        </button>\r\n)\r\n\r\nexport default SignUpButton;","import React from 'react'\r\n\r\nconst Suggestions = (props) => {\r\n    const { suggestion, placeId, style } = props;\r\n    \r\n    return(\r\n        <div style={style} key={placeId}>\r\n            {suggestion.description}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Suggestions;","import React from 'react';\r\n\r\nimport './form-input.styles.scss'\r\n\r\nconst FormInput = ({ register, label, error, className, placeholder, ...inputProps }) => {\r\n\r\n    const required = \"This field is required\";\r\n    const maxLength = \"Your input exceed maximum length\"; \r\n\r\n    const errorMessage = error => {\r\n        return <div className=\"error-message\">{error}</div>;\r\n      };\r\n\r\n      console.log(error);\r\n   \r\n   return(\r\n   <div>\r\n        <input\r\n            ref={register}\r\n            className={className}\r\n            placeholder={placeholder}\r\n            {...inputProps}\r\n        />\r\n\r\n                {error && \r\n                error.type === \"required\" &&\r\n                errorMessage(required)}\r\n                {error &&\r\n                error.type === \"maxLength\" &&\r\n                errorMessage(maxLength)}\r\n\r\n    </div>\r\n)}\r\n\r\nexport default FormInput;","import React, { useState } from 'react'\r\nimport { useForm } from 'react-hook-form';\r\nimport PlacesAutocomplete from 'react-places-autocomplete';\r\n\r\nimport SignUpButton from '../../components/sing-up-button/sign-up-button.component';\r\nimport Suggestions from '../../components/suggestions/suggestions.component';\r\nimport FormInput from '../../components/input/form-input.component';\r\n\r\nimport './registration-page.styles.scss';\r\n\r\nfunction RegistrationPage() {\r\n    let getLocalStorageData = localStorage.getItem('allUsers');\r\n    let allRegisteredUsers = JSON.parse(getLocalStorageData);\r\n    \r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [users, setAllUsers] = useState(allRegisteredUsers)\r\n    const [address, setAddress] = useState('');\r\n    const [updateUser, setUpdateNewUser] = useState({\r\n        name: '',\r\n        lastName: '',\r\n        email: '',\r\n        location: ''\r\n    });\r\n\r\n    console.log(updateUser);\r\n\r\n    const handleSelect = value => {\r\n        setAddress(value);\r\n    }\r\n\r\n//push new registration object to localStorage by creating ar adding a new object to an array\r\n    const addNewUser = data => {\r\n        let allUsers = JSON.parse(localStorage.getItem('allUsers')) || []; \r\n        allUsers.push(data);\r\n        localStorage.setItem('allUsers', JSON.stringify(allUsers));\r\n    }\r\n\r\n    const onUpdate = (user) => {\r\n        let index = allRegisteredUsers.indexOf(user)\r\n        let user2 = JSON.parse(localStorage.getItem('allUsers'))\r\n\r\n        user2[index] = updateUser;\r\n        localStorage.setItem('allUsers', JSON.stringify(user2))\r\n        setAllUsers(JSON.parse(localStorage.getItem('allUsers')))\r\n    }\r\n\r\n\r\n//Submit form and add data to localStorage and clear inputs\r\n    const onSubmit = (data, e) => {\r\n        e.preventDefault();\r\n\r\n        addNewUser(data);\r\n        e.target.reset();\r\n    };\r\n \r\n    return (\r\n    <div>\r\n        <div className=\"group\">\r\n            <div className=\"wrapper\"> \r\n                <form className=\"form\"  onSubmit={handleSubmit(onSubmit)}>\r\n            <h1>Sign Up</h1>\r\n            {/* name input */}\r\n                <FormInput\r\n                    placeholder=\"Name\"\r\n                    className=\"form-input\"\r\n                    name=\"name\"\r\n                    register={register({ \r\n                        required: true, \r\n                        pattern: /^[A-Za-z]+$/i \r\n                    })}\r\n                    error={errors.name}\r\n                />\r\n            \r\n            {/* last name input */}\r\n                <FormInput\r\n                    placeholder=\"Last Name\"\r\n                    className=\"form-input\"\r\n                    name=\"lastName\"\r\n                    register={register({ \r\n                        required: true, \r\n                        pattern: /^[A-Za-z]+$/i \r\n                    })}\r\n                    error={errors.name}           \r\n                />\r\n                \r\n            {/* Email input */}\r\n                <FormInput\r\n                    placeholder=\"Email\"\r\n                    className=\"form-input\"\r\n                    name='email'\r\n                    register={register({ \r\n                        required: true, \r\n                        pattern: /^\\S+@\\S+$/i \r\n                    })}\r\n                    type='email'\r\n                    error={errors.email}  \r\n                />\r\n        \r\n            {/* Google places component */}\r\n                <PlacesAutocomplete \r\n                    value={address} \r\n                    onChange={setAddress} \r\n                    onSelect={handleSelect}\r\n                >{({ getInputProps, suggestions, loading, getSuggestionItemProps }) => \r\n                    <div>\r\n                        <FormInput \r\n                            className=\"form-input\"\r\n                            name=\"location\"\r\n                            {...getInputProps({ placeholder: \"Address\" })}  \r\n                            register={register({ required: true })}\r\n                            error={errors.location}\r\n                        />\r\n            \r\n                        <div>\r\n                            {loading && <div>Fetching...</div>}\r\n\r\n                            {suggestions.map((suggestion) => {\r\n\r\n                                return (\r\n                                    // Suggestions component\r\n                                    <div {...getSuggestionItemProps(suggestion)}>\r\n                                        <Suggestions suggestion={suggestion} key={suggestion.placeId} />\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </div>}\r\n                </PlacesAutocomplete>\r\n\r\n                    <SignUpButton type=\"Submit\">\r\n                        Sign Up\r\n                    </SignUpButton>\r\n                </form>\r\n        </div>\r\n    </div>\r\n\r\n                {!allRegisteredUsers \r\n                    ? <div><h1>No Users</h1></div> \r\n                    : allRegisteredUsers.map((u, index) => {\r\n                    return (\r\n                        <div className=\"container\" key={index}>      \r\n                            <h3>{u.name} {u.lastName}</h3>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-sm\">\r\n                                    <div className=\"form-group\">\r\n                                    <label>Name</label>\r\n                                    <input \r\n                                        className=\"form-control\" \r\n                                        onChange={(e) => (setUpdateNewUser({name: e.target.value}))} \r\n                                        placeholder={u.name} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label>Last Name</label>\r\n                                    <input \r\n                                        className=\"form-control\" \r\n                                        onChange={(e) => (setUpdateNewUser({lastName: e.target.value}))} \r\n                                        placeholder={u.lastName} \r\n                                    />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label>E-mail</label>\r\n                                    <input \r\n                                        className=\"form-control\" \r\n                                        onChange={(e) => (setUpdateNewUser({email: e.target.value}))} \r\n                                        placeholder={u.email} />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label>Address</label>\r\n                                    <input \r\n                                        className=\"form-control\" \r\n                                        onChange={(e) => (setUpdateNewUser({location: e.target.value}))} \r\n                                        placeholder={u.location} />\r\n                            </div>\r\n                            <button \r\n                                type=\"button\"\r\n                                className=\"btn btn-dark\"\r\n                                onClick={() => onUpdate(u)}\r\n                                    >Update\r\n                            </button>\r\n                        </div>\r\n                    )\r\n                })}\r\n    </div>\r\n    )}\r\n\r\n\r\nexport default RegistrationPage;\r\n","import React from 'react'\nimport './App.css';\n\nimport RegistrationPage from './pages/registration-page/registration-page.component';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RegistrationPage /> \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}