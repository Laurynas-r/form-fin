{"version":3,"sources":["components/sing-up-button/sign-up-button.component.jsx","components/suggestions/suggestions.component.jsx","components/input/form-input.component.jsx","components/users-table/users-table.component.jsx","pages/registration-page/registration-page.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SignUpButton","children","className","Suggestions","props","suggestion","placeId","style","description","FormInput","register","error","label","placeholder","inputProps","errorMessage","console","log","ref","type","UsersTable","allRegisteredUsers","map","u","index","name","lastName","email","location","RegistrationPage","useForm","handleSubmit","errors","useState","address","setAddress","getLocalStorageData","localStorage","getItem","JSON","parse","onSubmit","data","e","preventDefault","allUsers","push","setItem","stringify","addNewUser","target","reset","required","pattern","value","onChange","onSelect","getInputProps","suggestions","loading","active","backgroundColor","cursor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a172935.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './sign-up-button.styles.scss';\r\n\r\nconst SignUpButton = ({children}) => (\r\n    \r\n        <button className=\"sign-up-button\">\r\n            {children}\r\n        </button>\r\n)\r\n\r\nexport default SignUpButton;","import React from 'react'\r\n\r\nconst Suggestions = (props) => {\r\n    const { suggestion, placeId, style } = props;\r\n    \r\n    return(\r\n        <div style={style} key={placeId}>\r\n            {suggestion.description}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Suggestions;","import React from 'react';\r\n\r\nimport './form-input.styles.scss'\r\n\r\nconst FormInput = ({ register, label, error, className, placeholder, ...inputProps }) => {\r\n\r\n    const required = \"This field is required\";\r\n    const maxLength = \"Your input exceed maximum length\"; \r\n\r\n    const errorMessage = error => {\r\n        return <div className=\"error-message\">{error}</div>;\r\n      };\r\n\r\n      console.log(error);\r\n   \r\n   return(\r\n   <div>\r\n        <input\r\n            ref={register}\r\n            className={className}\r\n            placeholder={placeholder}\r\n            {...inputProps}\r\n        />\r\n\r\n                {error && \r\n                error.type === \"required\" &&\r\n                errorMessage(required)}\r\n                {error &&\r\n                error.type === \"maxLength\" &&\r\n                errorMessage(maxLength)}\r\n\r\n    </div>\r\n)}\r\n\r\nexport default FormInput;","import React from 'react'\r\n\r\nimport \"./users-table.styles.scss\";\r\n\r\nconst UsersTable = ({allRegisteredUsers}) => (\r\n\r\n    <div className=\"users-table\">\r\n        {!allRegisteredUsers \r\n        ? <h3 className=\"no-users\">Looks empty here, please Sign Up</h3> \r\n        : <table className=\"table\" >\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>Last Name</th> \r\n                <th>Email</th>\r\n                <th>Address</th>\r\n            </tr>\r\n        \r\n            {!allRegisteredUsers \r\n            ? <div>No Users Sorry</div> \r\n            : allRegisteredUsers.map((u, index) => (\r\n                <tr key={index}>\r\n                <td>{u.name}</td>\r\n                <td>{u.lastName}</td>\r\n                <td>{u.email}</td>\r\n                <td>{u.location}</td>\r\n            </tr> \r\n            ))}     \r\n        </table> \r\n    }\r\n      \r\n    </div>\r\n    )\r\n\r\n\r\nexport default UsersTable;","import React, { useState } from 'react'\r\nimport { useForm } from 'react-hook-form';\r\nimport PlacesAutocomplete from 'react-places-autocomplete';\r\n\r\n\r\nimport SignUpButton from '../../components/sing-up-button/sign-up-button.component';\r\nimport Suggestions from '../../components/suggestions/suggestions.component';\r\nimport FormInput from '../../components/input/form-input.component';\r\nimport UsersTable from '../../components/users-table/users-table.component';\r\n\r\n\r\nimport './registration-page.styles.scss';\r\n\r\nfunction RegistrationPage() {\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [address, setAddress] = useState('');\r\n      \r\n    const handleSelect = value => {\r\n        setAddress(value);\r\n    }\r\n\r\n//push new registration object to localStorage by creating ar adding a new object to an array\r\n    const addNewUser = data => {\r\n\r\n        let allUsers = JSON.parse(localStorage.getItem('allUsers')) || []; \r\n        allUsers.push(data);\r\n        localStorage.setItem('allUsers', JSON.stringify(allUsers));\r\n    }\r\n\r\n//Submit form and add data to localStorage and clear inputs\r\n    const onSubmit = (data, e) => {\r\n        e.preventDefault();\r\n\r\n        addNewUser(data);\r\n        e.target.reset();\r\n    \r\n    };\r\n\r\n        let getLocalStorageData = localStorage.getItem('allUsers');\r\n        let allRegisteredUsers = JSON.parse(getLocalStorageData);\r\n\r\n        console.log(allRegisteredUsers);\r\n    \r\n    return (\r\n    <div className=\"group\">\r\n        <div className=\"wrapper\"> \r\n        <form className=\"form\"  onSubmit={handleSubmit(onSubmit)}>\r\n        <h1>Sign Up</h1>\r\n        {/* name input */}\r\n            <FormInput\r\n                placeholder=\"Name\"\r\n                className=\"form-input\"\r\n                name=\"name\"\r\n                register={register({ \r\n                    required: true, \r\n                    pattern: /^[A-Za-z]+$/i \r\n                })}\r\n                error={errors.name}\r\n            />\r\n        \r\n        {/* last name input */}\r\n            <FormInput\r\n                placeholder=\"Last Name\"\r\n                className=\"form-input\"\r\n                name=\"lastName\"\r\n                register={register({ \r\n                    required: true, \r\n                    pattern: /^[A-Za-z]+$/i \r\n                })}\r\n                error={errors.name}           \r\n            />\r\n            \r\n        {/* Email input */}\r\n            <FormInput\r\n                placeholder=\"Email\"\r\n                className=\"form-input\"\r\n                name='email'\r\n                register={register({ \r\n                    required: true, \r\n                    pattern: /^\\S+@\\S+$/i \r\n                })}\r\n                type='email'\r\n                error={errors.email}  \r\n            />\r\n    \r\n        {/* Google places component */}\r\n            <PlacesAutocomplete \r\n                value={address} \r\n                onChange={setAddress} \r\n                onSelect={handleSelect}\r\n            >{({ getInputProps, suggestions, loading }) => \r\n                <div>\r\n                    <FormInput \r\n                        className=\"form-input\"\r\n                        name=\"location\"\r\n                        {...getInputProps({ placeholder: \"Address\" })}  \r\n                        register={register({ required: true })}\r\n                        error={errors.location}\r\n                    />\r\n           \r\n                    <div>\r\n                        {loading && <div>Fetching...</div>}\r\n                        {suggestions.map((suggestion) => {\r\n                            const style = suggestion.active ? \r\n                            { backgroundColor: \"lightblue\", cursor: \"pointer\" } :\r\n                            { backgroundColor: \"#FFF\", cursor: \"pointer\" }\r\n                            console.log(suggestion);\r\n                            return (\r\n                                // Suggestions component\r\n                                <Suggestions suggestion={suggestion} style={style} key={suggestion.placeId} />\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>}\r\n            </PlacesAutocomplete>\r\n\r\n            <SignUpButton type=\"Submit\">\r\n                Sign Up\r\n            </SignUpButton>\r\n            \r\n        </form>\r\n        </div>\r\n            <UsersTable allRegisteredUsers={allRegisteredUsers} />\r\n    </div>\r\n    )}\r\n\r\n\r\nexport default RegistrationPage;\r\n","import './App.css';\n\nimport RegistrationPage from './pages/registration-page/registration-page.component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RegistrationPage /> \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}